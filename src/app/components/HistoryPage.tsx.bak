"use client";

import React, { useState } from "react";
import TransactionDetailModal from "./TransactionDetailModal";
import { useTransactionHistory } from "../../hooks/useTransactionHistory";

interface HistoryPageProps {
  onBack?: () => void;
  onNavigateToMore?: () => void;
  userAddress?: string;
  refreshKey?: number;
}

interface Transaction {
  id: string;
  type: "retiro" | "deposito" | "transferencia" | "deposit" | "withdraw" | "transfer";
  amount: number;
  merchant: string;
  date: string;
  time: string;
  transactionNumber: string;
  asset?: string;
  from?: string;
  to?: string;
  status?: string;
}

interface ModalTransaction {
  id: string;
  type: "retiro" | "deposito" | "transferencia";
  amount: number;
  merchant: string;
  date: string;
  time: string;
  transactionNumber: string;
}

export default function HistoryPage({ onBack, onNavigateToMore, userAddress, refreshKey }: HistoryPageProps) {
  const [selectedTransaction, setSelectedTransaction] = useState<ModalTransaction | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Hook de historial de transacciones del smart contract
  const { transactions: contractTransactions, isLoading, error, refreshHistory } = useTransactionHistory({
    userAddress: userAddress || ""
  });

  // Función para formatear fecha
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 0) return 'Hoy';
    if (diffDays === 1) return 'Ayer';
    
    return date.toLocaleDateString('es-ES', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  // Función para formatear hora
  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString('es-ES', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  // Transformar transacciones del smart contract al formato del componente
  const transformedTransactions: Transaction[] = contractTransactions.map((tx) => {
    let merchant = '';
    let type: Transaction['type'] = 'transferencia';

    if (tx.type === 'deposit') {
      merchant = 'Depósito USDC';
      type = 'deposito';
    } else if (tx.type === 'withdraw') {
      merchant = 'Retiro USDC';
      type = 'retiro';
    } else {
      merchant = 'Transferencia USDC';
      type = 'transferencia';
    }

    return {
      id: tx.id,
      type,
      amount: tx.type === 'withdraw' ? -tx.amount : tx.amount,
      merchant,
      date: formatDate(tx.date),
      time: formatTime(tx.date),
      transactionNumber: tx.tx_id || tx.id,
      asset: tx.asset,
      from: tx.from,
      to: tx.to,
      status: tx.status
    };
  });

  // Agrupar transacciones por fecha
  const groupedTransactions = transformedTransactions.reduce((groups, transaction) => {
    const date = transaction.date;
    if (!groups[date]) {
      groups[date] = [];
    }
    groups[date].push(transaction);
    return groups;
  }, {} as Record<string, Transaction[]>);

  const handleTransactionClick = (transaction: Transaction) => {
    // Convertir tipos para compatibilidad con el modal
    let modalType: "retiro" | "deposito" | "transferencia" = "transferencia";
    if (transaction.type === "deposit" || transaction.type === "deposito") {
      modalType = "deposito";
    } else if (transaction.type === "withdraw" || transaction.type === "retiro") {
      modalType = "retiro";
    } else {
      modalType = "transferencia";
    }

    const modalTransaction: ModalTransaction = {
      id: transaction.id,
      type: modalType,
      amount: transaction.amount,
      merchant: transaction.merchant,
      date: transaction.date,
      time: transaction.time,
      transactionNumber: transaction.transactionNumber
    };
    
    setSelectedTransaction(modalTransaction);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedTransaction(null);
  };

  const getTransactionIcon = (type: Transaction['type']) => {
    if (type === 'deposito') {
      return (
        <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M8 2L8 14M2 8L14 8" stroke="#059669" strokeWidth="2" strokeLinecap="round"/>
          </svg>
        </div>
      );
    } else if (type === 'retiro') {
      return (
        <div className="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M8 14L8 2M14 8L2 8" stroke="#DC2626" strokeWidth="2" strokeLinecap="round"/>
          </svg>
        </div>
      );
    } else {
      return (
        <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M8 2L8 14M2 8L14 8" stroke="#2563EB" strokeWidth="2" strokeLinecap="round"/>
          </svg>
        </div>
      );
    }
  };

  const getAmountColor = (amount: number) => {
    return amount >= 0 ? 'text-green-600' : 'text-red-600';
  };

  const getAmountPrefix = (amount: number) => {
    return amount >= 0 ? '+' : '';
  };

  return (
    <div className="history-full-screen">
      <main className="history-main">
        {/* Header */}
        <header className="history-header flex items-center justify-between p-4 border-b bg-white">
          <div className="flex items-center">
            <button onClick={onBack} className="mr-4">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M15 18L9 12L15 6" stroke="#666" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
            <h1 className="text-xl font-semibold text-[#1C2317]">Historial</h1>
          </div>
          <button 
            onClick={refreshHistory}
            className="p-2 text-[#2A906F] hover:bg-gray-50 rounded-lg transition-colors"
            disabled={isLoading}
          >
            <svg 
              width="20" 
              height="20" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              strokeWidth="2"
              className={isLoading ? "animate-spin" : ""}
            >
              <polyline points="23 4 23 10 17 10"></polyline>
              <polyline points="1 20 1 14 7 14"></polyline>
              <path d="m20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path>
            </svg>
          </button>
        </header>

        {/* Content */}
        <section className="history-content flex-1 overflow-y-auto">
          {isLoading && (
            <div className="flex items-center justify-center p-8">
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 border-2 border-[#2A906F] border-t-transparent rounded-full animate-spin"></div>
                <span className="text-gray-600">Cargando historial...</span>
              </div>
            </div>
          )}

          {error && (
            <div className="mx-4 mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p className="text-yellow-800 text-sm">⚠️ {error}</p>
            </div>
          )}

          {!isLoading && transformedTransactions.length === 0 && (
            <div className="flex flex-col items-center justify-center p-8 text-center">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#6B7280" strokeWidth="2">
                  <circle cx="12" cy="12" r="10"/>
                  <polyline points="12,6 12,12 16,14"/>
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Sin transacciones</h3>
              <p className="text-gray-500 text-sm">No hay transacciones registradas aún.</p>
            </div>
          )}

          {!isLoading && Object.keys(groupedTransactions).length > 0 && (
            <div className="pb-4">
              {Object.entries(groupedTransactions).map(([date, transactions], groupIndex) => (
                <div key={date} className="mb-6">
                  <h3 className="text-lg font-medium text-gray-600 mb-3 px-4">{date}</h3>
                  
                  {transactions.map((transaction, index) => (
                    <div key={transaction.id}>
                      <div className="px-4 mb-3">
                        <button 
                          onClick={() => handleTransactionClick(transaction)}
                          className="w-full flex items-center justify-between py-3 hover:bg-gray-50 rounded-lg transition-colors"
                        >
                          <div className="flex items-center gap-3">
                            {getTransactionIcon(transaction.type)}
                            <div className="text-left">
                              <p className="font-medium text-gray-900">{transaction.merchant}</p>
                              <p className="text-sm text-gray-500">{transaction.time}</p>
                            </div>
                          </div>
                          <div className="flex items-center gap-1">
                            <span className={`font-medium ${getAmountColor(transaction.amount)}`}>
                              {getAmountPrefix(transaction.amount)}${Math.abs(transaction.amount).toFixed(2)} {transaction.asset}
                            </span>
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                              <path d="M6 12L10 8L6 4" stroke="#6B7280" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </div>
                        </button>
                      </div>

                      {index < transactions.length - 1 && (
                        <div className="h-px bg-gray-100 mx-4"></div>
                      )}
                    </div>
                  ))}

                  {groupIndex < Object.keys(groupedTransactions).length - 1 && (
                    <div className="h-1.5 bg-gray-100 mb-6"></div>
                  )}
                </div>
              ))}
            </div>
          )}
        </section>

        {/* Bottom Navigation */}
        <nav className="bg-white border-t border-gray-100 px-4 py-3">
          <div className="flex items-center justify-around">
            {/* Home */}
            <button 
              onClick={onBack}
              className="flex flex-col items-center p-2 text-gray-500 hover:text-[#2A906F] transition-colors"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                <polyline points="9,22 9,12 15,12 15,22"/>
              </svg>
              <span className="text-xs mt-1">Inicio</span>
            </button>

            {/* History - Active */}
            <button 
              className="flex flex-col items-center p-2 text-[#2A906F]"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="10"/>
                <polyline points="12,6 12,12 16,14"/>
              </svg>
              <span className="text-xs mt-1">Historial</span>
            </button>

            {/* Settings */}
            <button 
              className="flex flex-col items-center p-2 text-gray-500 hover:text-[#2A906F] transition-colors"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="3"/>
                <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"/>
              </svg>
              <span className="text-xs mt-1">Ajustes</span>
            </button>

            {/* More */}
            <button 
              onClick={onNavigateToMore}
              className="flex flex-col items-center p-2 text-gray-500 hover:text-[#2A906F] transition-colors"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <circle cx="12" cy="12" r="1"/>
                <circle cx="19" cy="12" r="1"/>
                <circle cx="5" cy="12" r="1"/>
              </svg>
              <span className="text-xs mt-1">Más</span>
            </button>
          </div>
        </nav>

        {/* Transaction Detail Modal */}
        {selectedTransaction && (
          <TransactionDetailModal
            transaction={selectedTransaction}
            isOpen={isModalOpen}
            onClose={closeModal}
          />
        )}
      </main>

      <style jsx>{`
        .history-full-screen {
          position: fixed;
          inset: 0;
          background: white;
          z-index: 50;
        }
        .history-main {
          height: 100vh;
          max-width: 390px;
          margin: 0 auto;
          display: flex;
          flex-direction: column;
          background: white;
        }
        .history-content {
          background: #f9fafb;
        }
      `}</style>
    </div>
  );
}
